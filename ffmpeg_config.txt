#!/bin/bash


#overlay picture on video
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=(W-w)/2:(H-h)/2:enable='between(t,0,20)'" -pix_fmt yuv420p -c:a copy output.mp4
#overlay picture dependant of time
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=(W-(n))/2:(H-(n))/2:enable='between(t,0,20)'" -pix_fmt yuv420p -c:a copy output.mp4
#overlay picture dependant of time
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='if(gte(t,2), -w+(t-2)*20, NAN)':y=0" -pix_fmt yuv420p -c:a copy output.mp4
#overlay picture dependant of time
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='-w+(t-2)*20':y=0" -pix_fmt yuv420p -c:a copy output.mp4
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='floor(if(lt(-W+(n)*5,0), -W+(n)*5))':y=0" -pix_fmt yuv420p -c:a copy output.mp4
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='floor(if(lt(-W+(n)*5,0), -W+(n)*5))':y=0" -pix_fmt yuv420p -c:a copy output.mp4
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=(W-w)/2:(H-h)/2:enable='between(t,0,20)'" -pix_fmt yuv420p -c:a copy output.mp4

#simple overlay picture
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x=0:y=0" -pix_fmt yuv420p -c:a copy output.mp4
#overlay moving with time with 640 = nr x pixels and 337 = number of total frames in input
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='n*(640/337)':y=0" -pix_fmt yuv420p -c:a copy output.mp4
#overlay picture dependant of time
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='n*(640/337)':y=0" -pix_fmt yuv420p -c:a copy output.mp4
#start of overlay is so that you dont see it (just a bit too much on left side to see),
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='-w+(n*(640/337))':y=0" -pix_fmt yuv420p -c:a copy output.mp4
#loading bar covers lower 5% of the picture
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='-w+(n*(640/337))':y='0.95*H'" -pix_fmt yuv420p -c:a copy output.mp4
#use variable for total frames
TOT_FRAMES=$(ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 video.mp4)
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='-w+(n*(W/$TOT_FRAMES))':y='0.95*H'" -pix_fmt yuv420p -c:a copy output.mp4
#hardcode subtitles https://trac.ffmpeg.org/wiki/HowToBurnSubtitlesIntoVideo
TOT_FRAMES=$(ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 video.mp4)
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='-w+(n*(W/$TOT_FRAMES))':y='0.95*H'" -pix_fmt yuv420p -c:a copy output.mp4
ffmpeg -i video.mp4 -vf subtitles=subtitle.srt outputwithsubs.mp4
#add some compression and set compression mode to ultrafast
TOT_FRAMES=$(ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 video.mp4)
ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='-w+(n*(W/$TOT_FRAMES))':y='0.95*H'" -pix_fmt yuv420p -c:a copy -preset ultrafast -crf 10 output.mp4 && ffmpeg -i output.mp4 -vf subtitles=subtitle.srt outputwithsubs.mp4
#always overwrite with -y
TOT_FRAMES=$(ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 video.mp4)
ffmpeg -y -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='-w+(n*(W/$TOT_FRAMES))':y='0.95*H'" -pix_fmt yuv420p -c:a copy -preset ultrafast -crf 10 output.mp4 && ffmpeg -y -i output.mp4 -vf subtitles=subtitle.srt outputwithsubs.mp4
#style subtitles
ffmpeg -y -i output.mp4 -vf subtitles=subtitle.srt:force_style='FontName=DejaVu Serif,PrimaryColour=&HAA00FF00' outputwithsubs.mp4

subtitles=sub.srt:force_style='FontName=DejaVu Serif,PrimaryColour=&HAA00FF00'
:force_style='OutlineColour=&H80000000,BorderStyle=3,Outline=1,Shadow=0,MarginV=20'


ffmpeg -y  -i "wanderhouse - Sugar.mp3" -loop 1 -i frame.png -i waveform.png -i progress.png -filter_complex "[1][2]overlay=x=0:y=H-h:eval=init[over];[over]drawtext=fontfile=impact.ttf:fontsize=72:text='WANDERHOUSE- - SUGAR':x=(w-text_w)/2:y=(h-170-text_h):fontcolor=white:shadowy=2:shadowx=2:shadowcolor=black[text];[text][3] overlay=x='floor(if(lt(-W+(n)*0.248182258846,0), -W+(n)*0.248182258846))':y=H-h:format=yuv444" -shortest -acodec copy -vcodec libx264 -pix_fmt yuv420p -preset ultrafast -crf 10 video.mp4 -report




ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=width -of default=nokey=1:noprint_wrappers=1 video.mp4
#add compression 1 best 50 worst
ffmpeg -i video.mp4 -crf 10 compressed.mp4
#style subtitles, https://ffmpeg.org/ffmpeg-filters.html#subtitles
ffmpeg -i input -filter_complex "subtitles=subs.ass:force_style='OutlineColour=&H80000000,BorderStyle=3,Outline=1,Shadow=0,MarginV=20'" output


#Parameters
[0:v][1:v] = use video number one and video number two and use video not aud
lt(x, y) = Return 1 if x is lesser than y, 0 otherwise.
-b = set bitrate
in_w = input width
in_h = input height
‘t’ = timestamp expressed in seconds, NAN if the input timestamp is unknown
‘n’ = sequential number of the input frame, starting from 0
‘pos’ = the position in the file of the input frame, NAN if unknown
‘w’, ‘h’ = width and height of the input frame if video
'W' 'H' = are the base video dimensions,  'w', 'h' the overlay video dimension

#number of total frames from a video
ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 video.mp4
#width in px, see https://trac.ffmpeg.org/wiki/FFprobeTips
ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=width -of default=nokey=1:noprint_wrappers=1 video.mp4

eval $(ffprobe -v error -of flat=s=_ -select_streams v:0 -show_entries stream=height,width video.mp4) size=${streams_stream_0_width}x${streams_stream_0_height} echo $size


#crop video, x and y set upper left corners of the cropping, if no parames then crops centered
ffmpeg -i inputfile.mp4 -filter:v "crop=w=640:h=480:x=100:y=200" outfile.mp4





#use variable for width
#TOT_FRAMES=$(ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 video.mp4) && ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='-w+(n*($WIDTH_PX/$TOT_FRAMES))':y='0.95*H'" -pix_fmt yuv420p -c:a copy output.mp4

#WIDTH_PX=$(ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=width -of default=nokey=1:noprint_wrappers=1 video.mp4) &&
#TOT_FRAMES=$(ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 video.mp4) && ffmpeg -i video.mp4 -i loadingbar.png -filter_complex "[0:v][1:v] overlay=x='-w+(n*(W/$TOT_FRAMES))':y='0.95*H'" -pix_fmt yuv420p -c:a copy output.mp4
